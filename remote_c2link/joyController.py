#!/usr/bin/env python# Author: Christos Georgiades# Email: cgeorg15@ucy.ac.cy# Date :07/07/2022# license removed for brevityimport rospyimport threadingimport timeimport mathimport datetimefrom std_msgs.msg import String, Bool, Headerfrom dji_sdk.msg import ScanArea, MissionWaypoint, JoystickParamsfrom kios.msg import Telemetry, MissionDji, GpsInput, MissionCommandDJIfrom dji_sdk.srv import SetJoystickMode, JoystickAction, ObtainControlAuthorityfrom dji_sdk.srv import FlightTaskControlfrom sensor_msgs.msg import Joyfrom geometry_msgs.msg import Vector3Stamped, Vector3from math import sin, cos, atan2, sqrtfrom simple_pid import PIDr = rospy.Rate(50)  # 50hz 25                    # r.sleep()pidAlt = PID(Kp=1, Ki=0.0, Kd=0.2, sample_time=0.02,  output_limits=(-2.0, 5.0))pidAlt.setpoint = 0     # value we are trying to achievepidAlt(0)               # value we readpidDist = PID(Kp=0.35, Ki=0.00023, Kd=0.07, sample_time=0.02, output_limits=(-2.0, 8.0))pidDist.setpoint = 0    # value we are trying to achievepidDist(0)              # value we readprintStep = 50dronename = NoneRAD_2_DEG = 57.29577951DEG_2_RAD = 0.01745329252EARTH_RADIUS = 6378137.0activeJoystickAction = JoystickParams()activeJoystickAction.x = 0.0activeJoystickAction.y = 0.0activeJoystickAction.z = 0.0activeJoystickAction.yaw = 0.0sampleIndex = 0sampleSize = 10a = 0.25historyJoystickAction = [JoystickParams()] * sampleSizesumJoystickAction = JoystickParams()sumJoystickAction.x = 0.0sumJoystickAction.y = 0.0sumJoystickAction.z = 0.0sumJoystickAction.yaw = 0.0st = 0.0countSub = 0countPub = 0elapsed_time = 0.0for x in range(sampleSize):    actionParams = JoystickParams()    actionParams.x = 0.0    actionParams.y = 0.0    actionParams.z = 0.0    actionParams.yaw = 0.0    historyJoystickAction.append(actionParams)bearing = 0.0altitude = 0.0latitude = 0.0longitude = 0.0velocity = 0.0def telemetryCB(telemetry):    global altitude, latitude, longitude, bearing, velocity    global motorsActive    altitude = float(telemetry.altitude)    latitude = float(telemetry.latitude)    longitude = float(telemetry.longitude)    bearing = float(telemetry.heading)    velocity = float(telemetry.velocity)    if altitude > 3.0:        motorsActive = Truedef setupJoystickMode():    joystickModeSrv=rospy.ServiceProxy(dronename + '/set_joystick_mode', SetJoystickMode)    horizontal_mode = 1    vertical_mode = 0    yaw_mode = 1    hoorizontal_coordinate = 1    stable_mode = 1    response = joystickModeSrv(horizontal_mode, vertical_mode, yaw_mode, hoorizontal_coordinate, stable_mode)    print('Set Joystick Mode Response:', response)controlAuthorityActive = Falsedef obtainControlAuthority(enable_obtain):    global controlAuthorityActive    #Type: dji_sdk/ObtainControlAuthority    #Args: enable_obtain    controlAuthoritySrv = rospy.ServiceProxy(dronename+'/obtain_release_control_authority', ObtainControlAuthority)    response = controlAuthoritySrv(enable_obtain)    controlAuthorityActive = enable_obtain    print('Desired Control Authority:', enable_obtain, 'controlAuthoritySrv response:', response)motorsActive = Falsedef takeOffTask():    global motorsActive    global dronename    global taskCtrl    print('altitude:', altitude)    print('motorsActive:', motorsActive)    try:        if altitude < 0.5 and not motorsActive:            motorsActive = True            print('Activating Motors...')            resp = taskCtrl(7, JoystickParams(), 0, 0.0, 0.0)            print(resp.result)            print('Motors active')        elif altitude < 3.0 and motorsActive:            motorsActive = False            print('Landing...')            resp = taskCtrl(31, JoystickParams(), 0, 0.0, 0.0)            print(resp.result)            print('Landed')            print('Deactivating Motors...')            resp = taskCtrl(8, JoystickParams(), 0, 0.0, 0.0)            print(resp.result)            print('Motors deactivated')    except rospy.ServiceException as e:        passdef retToHomeTask():    global motorsActive    global taskCtrl    print('altitude:', altitude)    print('motorsActive:', motorsActive)    if altitude > 3.0:        print('Returning home...')        resp = taskCtrl(1, JoystickParams(), 0, 0.0, 0.0)        #motorsActive = FalsebuttonState = [0] * 11def joystickInputCB(joyInput):#axes: [left-stick-x, left-stick-y, left-trigger, right-stick-x, right-stick-y, right-trigger, dpad-x, dpad-y]#axes: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0]#buttons: [A, B, X, Y, left-bumper, right-bumper, select, start, home, left-stick-click, right-stick-click]#buttons: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]    #print(joyInput)    horizontalVel = 15  # m/s 30    verticalVel = 2     # m/s 5    yawRate = 80       # deg/s    x = joyInput.axes[4] * 10     # * horizontalVel # gia full speed fevgw ti dieresi    y = joyInput.axes[3] * horizontalVel * -1    z = joyInput.axes[1] * verticalVel    yaw = joyInput.axes[0] * yawRate * -1    if joyInput.buttons[6] > 0 and not buttonState[6]:        buttonState[6] = 1        print('Pressed Control Authority Button')        obtainControlAuthority(not controlAuthorityActive)    if joyInput.buttons[7] > 0 and not buttonState[7]:        buttonState[7] = 1        print('Pressed TAKE OFF/LAND Button')        takeOffTask()    if joyInput.buttons[8] > 0 and not buttonState[8]:        buttonState[8] = 1        print('Pressed Return To Home Button')        retToHomeTask()    if joyInput.buttons[6] < 1:        buttonState[6] = 0    if joyInput.buttons[7] < 1:        buttonState[7] = 0    if joyInput.buttons[8] < 1:        buttonState[8] = 0    #print(x, y, z, yaw)    publishAction(x, y, z, yaw)def publishAction(x, y, z, yaw):    global currentJoystickAction    global activeJoystickAction, sumJoystickAction    global historyJoystickAction, sampleIndex, sampleSize    actionParams = JoystickParams()    actionParams.x = x    actionParams.y = y    actionParams.z = z    actionParams.yaw = yaw    activeJoystickAction = actionParams    for i in reversed(range(1, 10)):        historyJoystickAction[i] = historyJoystickAction[i-1]    historyJoystickAction[0] = actionParamsdef pushAction():    global activeJoystickAction, st, countSub, countPub    global outJoystickAction    countPub += 1    st = time.time()    #response = joystickActionSrv(activeJoystickAction)    response = joystickActionSrv(outJoystickAction)    et = time.time()    countSub += 1    if not response:        print('================')        print('joystickActionSrv response:', response)        print(activeJoystickAction)    countSub -= 1#===============================================================================================    lines = [datetime.datetime.now(), activeJoystickAction.x, activeJoystickAction.y, activeJoystickAction.z, activeJoystickAction.yaw]    with open('joystickAction1.txt', 'a') as f:        f.writelines([str(line) + "," for line in lines])	f.writelines('\n')    elapsed_time = et - st      lines2 = [datetime.datetime.now(), st, et, elapsed_time]    with open ('TimeDelay.txt', 'a') as f:        f.writelines([str(line) + "," for line in lines2])	f.writelines('\n')        lines3 = [datetime.datetime.now(), countPub, countSub, response]    with open ('CountPubSub.txt', 'a') as f:        f.writelines([str(line) + "," for line in lines3])        f.writelines('\n')    #================================================================================================    #print('joystickActionSrv response:', response)def listener(dji_name = "/matrice300"):    global outJoystickAction    global responsePub, droneStatePub, joystickActionSrv    global taskCtrl    global dronename    global countSub, countPub, elapsed_time    dronename = dji_name    boardId = dji_name.split('_', 1)[1]    nodename = dronename.replace('/', '') + '_joyController'    print('JoyController', nodename)    setupJoystickMode()    #obtainControlAuthority(True)    obtainControlAuthority(False)    rospy.Subscriber(dronename + '/Telemetry', Telemetry, telemetryCB)    rospy.Subscriber(dronename + '/joy', Joy, joystickInputCB)    joystickActionSrv = rospy.ServiceProxy(dronename+'/joystick_action', JoystickAction)    taskCtrl = rospy.ServiceProxy(dronename + '/flight_task_control', FlightTaskControl)        print('JoyController Ready')#================================================================================================    with open ('TimeDelay.txt', 'a') as f:        f.writelines('dateTime,st,et,timeDelay')        f.writelines('\n')       with open('CountPubSub.txt', 'a') as f:        f.writelines('dateTime,countPub,countSub,responseMsg')        f.writelines('\n')    with open('joystickAction1.txt', 'a') as f:        f.writelines('dateTime,x,y,z,yaw')        f.writelines('\n')#================================================================================================    a = 0.25    while True:        if activeJoystickAction:            for i in reversed(range(1, 10)):                historyJoystickAction[i] = historyJoystickAction[i - 1]            historyJoystickAction[0] = historyJoystickAction[1]            #activeJoystickAction = JoystickParams()            x = 0            y = 0            z = 0            yaw = 0            for i in range(10):                x = x + pow(1 - a, i) * historyJoystickAction[i].x                y = y + pow(1 - a, i) * historyJoystickAction[i].y                z = z + pow(1 - a, i) * historyJoystickAction[i].z            outJoystickAction = JoystickParams()            outJoystickAction.x = a * x            outJoystickAction.y = a * y            outJoystickAction.z = a * z            outJoystickAction.yaw = activeJoystickAction.yaw            print('===========')            for i in range(3):                print(historyJoystickAction[i])            pushAction()        r.sleep()        